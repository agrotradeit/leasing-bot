
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import math
import os

API_TOKEN = os.getenv("BOT_TOKEN") or "8138873257:AAFrhH5LJyFZTtfuKXlAz74wUUM5PeS28Y4"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_data = {}

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    user_data[message.from_user.id] = {}
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º –ª–∏–∑–∏–Ω–≥.
–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–µ—Ö–Ω–∏–∫–∏ –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1300000):")

@dp.message_handler(lambda message: message.text.isdigit() and 'price' not in user_data.get(message.from_user.id, {}))
async def price_handler(message: types.Message):
    user_data[message.from_user.id]['price'] = int(message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –ª–∏–∑–∏–Ω–≥–∞ –≤ –≥–æ–¥–∞—Ö (1‚Äì5):")

@dp.message_handler(lambda message: message.text.isdigit() and 'term' not in user_data.get(message.from_user.id, {}))
async def term_handler(message: types.Message):
    term = int(message.text)
    if term < 1 or term > 5:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –æ—Ç 1 –¥–æ 5 –ª–µ—Ç.")
        return
    user_data[message.from_user.id]['term'] = term
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —É–¥–æ—Ä–æ–∂–∞–Ω–∏–µ (% –≥–æ–¥–æ–≤—ã—Ö), –Ω–∞–ø—Ä–∏–º–µ—Ä: 10")

@dp.message_handler(lambda message: message.text.replace('.', '', 1).isdigit() and 'rate' not in user_data.get(message.from_user.id, {}))
async def rate_handler(message: types.Message):
    user_data[message.from_user.id]['rate'] = float(message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å (% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏), –Ω–∞–ø—Ä–∏–º–µ—Ä: 20")

@dp.message_handler(lambda message: message.text.replace('.', '', 1).isdigit() and 'advance' not in user_data.get(message.from_user.id, {}))
async def advance_handler(message: types.Message):
    uid = message.from_user.id
    user_data[uid]['advance'] = float(message.text)
    
    price = user_data[uid]['price']
    term = user_data[uid]['term']
    rate = user_data[uid]['rate']
    advance_percent = user_data[uid]['advance']

    advance = price * advance_percent / 100
    financed = price - advance
    total_with_interest = financed * math.pow(1 + rate / 100, term)
    yearly_payment = total_with_interest / term
    monthly_payment = yearly_payment / 12

    result = f"""üìä –†–∞—Å—á—ë—Ç –ø–æ –ª–∏–∑–∏–Ω–≥—É:

–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–µ—Ö–Ω–∏–∫–∏: {price:,.0f} ‚ÇΩ
–ê–≤–∞–Ω—Å ({advance_percent:.0f}%): {advance:,.0f} ‚ÇΩ
–°—Ä–æ–∫: {term} –ª–µ—Ç
–£–¥–æ—Ä–æ–∂–∞–Ω–∏–µ: {rate:.1f}% –≤ –≥–æ–¥

–§–∏–Ω–∞–Ω—Å–∏—Ä—É–µ–º–∞—è —Å—É–º–º–∞: {financed:,.0f} ‚ÇΩ
–ò—Ç–æ–≥ —Å –ø–µ—Ä–µ–ø–ª–∞—Ç–æ–π: {total_with_interest:,.0f} ‚ÇΩ

üìÖ –ì–æ–¥–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–∏:
"""

    for year in range(1, term + 1):
        result += f"‚Ä¢ –ì–æ–¥ {year}: {yearly_payment:,.0f} ‚ÇΩ\n"

    result += f"\nüí¨ –ü—Ä–∏–º–µ—Ä–Ω–æ {monthly_payment:,.0f} ‚ÇΩ –≤ –º–µ—Å—è—Ü"

    await message.answer(result)

@dp.message_handler()
async def fallback_handler(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ —à–∞–≥–∞–º –∏ –≤–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. –ù–∞—á–Ω–∏—Ç–µ —Å /start.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
